import type { Gradient } from '../../types/gradient.ts';
import { CustomerLogoPluginConfig } from '../../types/plugins.ts';
import { CarouselPosition, EndPlaylistBehavior } from '../../types/carousel.ts';
import { WistiaPlayer } from '../wistiaPlayer/WistiaPlayer.tsx';
import { WistiaCarousel } from '../carousel/WistiaCarousel.tsx';
import { PLAYLIST_METHODS_CHANGED_MEDIA_EVENT_PAYLOAD } from '../shared/playlists/playlist-methods.ts';
declare module 'preact/src/jsx' {
    namespace JSXInternal {
        interface IntrinsicElements {
            'wistia-carousel': WistiaCarousel;
            'wistia-player': WistiaPlayer;
        }
    }
}
export declare const PLAYLIST_LOADED_EVENT = "loaded";
declare global {
    interface WindowEventMap {
        PLAYLIST_METHODS_CHANGED_MEDIA_EVENT: PLAYLIST_METHODS_CHANGED_MEDIA_EVENT_PAYLOAD;
    }
}
export declare const PLAYLIST_AUTOPLAY_NEXT_MEDIA_STARTED_EVENT = "wistia-playlist-autoplay-next-media-started";
export declare const PLAYLIST_CHANGED_MEDIA_EVENT = "wistia-playlist-changed-media";
export type PLAYLIST_CHANGED_MEDIA_EVENT_PAYLOAD = Event & {
    detail: {
        mediaId: string;
    };
};
export declare class WistiaPlaylist extends HTMLElement {
    #private;
    isLoaded: boolean;
    constructor();
    static get observedAttributes(): string[];
    get autoAdvance(): boolean;
    set autoAdvance(value: unknown);
    get bigPlayButton(): boolean;
    set bigPlayButton(value: unknown);
    get captionsOnByDefault(): boolean;
    set captionsOnByDefault(value: unknown);
    get carousel(): WistiaCarousel | null;
    get carouselBackgroundColor(): string;
    set carouselBackgroundColor(value: string | null | undefined);
    get carouselControl(): boolean;
    set carouselControl(value: unknown);
    get carouselPosition(): CarouselPosition;
    set carouselPosition(value: string | undefined);
    get carouselVisibleOnLoad(): boolean;
    set carouselVisibleOnLoad(value: unknown);
    get channelId(): string;
    set channelId(value: string);
    get dockCarousel(): boolean;
    set dockCarousel(value: unknown);
    get doNotTrack(): boolean;
    set doNotTrack(value: unknown);
    get embedHost(): string | null | undefined;
    set embedHost(value: string);
    get endPlaylistBehavior(): EndPlaylistBehavior;
    set endPlaylistBehavior(value: unknown);
    get gradient(): Gradient | undefined;
    set gradient(value: unknown);
    get id(): string;
    set id(value: string);
    get playerColor(): string | undefined;
    set playerColor(value: string);
    get roundedPlaylist(): number | undefined;
    set roundedPlaylist(value: unknown);
    get wistiaLogoControl(): boolean;
    set wistiaLogoControl(value: unknown);
    /**
     * Set up a logo overlay that will appear for all media in the playlist
     *
     * @param {CustomerLogoPluginConfig} options - An object representing the image URL, size, placement, and target URL for a logo overlay
     */
    addLogoOverlay(options: CustomerLogoPluginConfig): void;
    /**
     * In a future world, we could export this as a utility alongside a WistiaPlaylist react component
     * Until then, we'll expose this as a public method
     *
     * @param overridePlayerColor - optional color to use as the player color
     * @returns the calculated playlist background color based on the player color
     */
    getCarouselBackgroundColorFromPlayerColor(overridePlayerColor?: string): string;
    getWistiaPlayer(): Promise<WistiaPlayer>;
    playNextMedia(): Promise<void>;
    playPreviousMedia(): Promise<void>;
    /**
     * When the request for carousel data fails with an unauthorized response, we will render
     * a hard wall with a password form. The hard wall should match the final size of the playlist embed
     * as closely as possible, so we'll first set up the --wistia-playlist-aspect-ratio CSS variable
     * based on the playlist configuration and aspect ratio/type of the first media.
     *
     * This is a protected method only so that we can spy on it in the unit tests.
     *
     * @returns undefined
     */
    protected _renderHardWallWithPasswordForm(): void;
    protected attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
    protected connectedCallback(): Promise<void>;
    protected disconnectedCallback(): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'wistia-playlist': WistiaPlaylist;
    }
}
//# sourceMappingURL=WistiaPlaylist.d.ts.map
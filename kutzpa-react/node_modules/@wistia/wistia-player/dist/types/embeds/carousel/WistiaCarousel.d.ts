import { CSSProperties } from 'preact/compat';
import { CarouselColorPalette, CarouselMediaType, CarouselPlayerEmbedOptions, CarouselPosition, EndPlaylistBehavior } from '../../types/carousel.ts';
import { WistiaPlayer } from '../wistiaPlayer/WistiaPlayer.tsx';
import { PlayerTransitionType } from '../../types/player-api-types.ts';
import { Gradient } from '../../types/gradient.ts';
export type OrientationType = 'horizontal' | 'vertical';
export declare const CAROUSEL_AUTOPLAY_NEXT_MEDIA_STARTED_EVENT = "wistia-carousel-autoplay-next-media-started";
export declare const CAROUSEL_CHANGED_MEDIA_EVENT = "wistia-carousel-changed-media";
export type CAROUSEL_CHANGED_MEDIA_EVENT_PAYLOAD = Event & {
    detail: {
        mediaId: string;
    };
};
declare module 'preact/src/jsx' {
    namespace JSXInternal {
        interface IntrinsicElements {
            'wistia-carousel': WistiaCarousel;
        }
    }
}
declare global {
    interface WindowEventMap {
        PLAYLIST_METHODS_AUTOPLAYED_NEXT_MEDIA_EVENT: CustomEvent;
    }
}
export declare class WistiaCarousel extends HTMLElement {
    #private;
    activeMediaDisplayIndex: number;
    activeMediaId: string;
    carouselPlayerEmbedOptions: CarouselPlayerEmbedOptions;
    carouselTitle: string;
    colorPalette: CarouselColorPalette;
    currentMediaIndex: number;
    isInsidePlayerControl: boolean;
    isInsideVideoPlayer: boolean;
    mediaCount: number;
    mediaList: CarouselMediaType[];
    constructor();
    static get observedAttributes(): string[];
    get autoAdvance(): boolean;
    set autoAdvance(value: unknown);
    get backgroundColor(): string;
    set backgroundColor(value: string);
    get backgroundWidth(): CSSProperties['backgroundWidth'];
    set backgroundWidth(value: CSSProperties['backgroundWidth']);
    get channelId(): string | undefined;
    set channelId(value: string);
    get embedHost(): string | null | undefined;
    set embedHost(value: string);
    get endBehavior(): EndPlaylistBehavior;
    set endBehavior(value: unknown);
    get gradient(): Gradient | undefined;
    set gradient(value: Gradient | null);
    get isHidden(): boolean;
    set isHidden(value: unknown);
    get isInsidePlaylistEmbed(): boolean;
    set isInsidePlaylistEmbed(value: string);
    get orientation(): OrientationType;
    set orientation(value: string);
    get playerAlignment(): CarouselPosition;
    set playerAlignment(value: unknown);
    set playerDomId(value: string);
    get playerDomId(): string | null | undefined;
    get roundedCarousel(): number;
    set roundedCarousel(value: unknown);
    get transition(): PlayerTransitionType;
    readonly getWistiaPlayer: () => Promise<WistiaPlayer>;
    hideCarouselControl: () => void;
    playMedia: (media: CarouselMediaType) => Promise<void>;
    playNextMedia: () => Promise<void>;
    playPreviousMedia: () => Promise<void>;
    protected attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
    protected connectedCallback(): Promise<void>;
    protected disconnectedCallback(): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'wistia-carousel': WistiaCarousel;
    }
}
//# sourceMappingURL=WistiaCarousel.d.ts.map
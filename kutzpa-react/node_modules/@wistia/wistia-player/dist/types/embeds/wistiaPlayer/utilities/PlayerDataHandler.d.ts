import type { EmbedOptions, MediaData } from '../../../types/player-api-types.ts';
export declare class PlayerDataHandler {
    #private;
    /**
     * Returns the final embed options which are a merge of all the source data and the overrides
     * @returns {EmbedOptions}
     * @readonly
     */
    get embedOptions(): EmbedOptions;
    /**
     * Returns the final media data which is a merge of all the source data
     * @returns {MediaData}
     * @readonly
     */
    get mediaData(): MediaData;
    /**
     * Sets the source data for the embed options set on the <wistia-player> DOM element
     * @param {EmbedOptions} data
     * @returns {void}
     */
    setDomEmbedOptionSource(data: EmbedOptions): void;
    /**
     * Sets the source data for the embed options from an iframe's url search params
     * @returns {void}
     */
    setIframeEmbedOptionSource(data: EmbedOptions): void;
    /**
     * Sets the source data for the media data
     * @param {MediaData} data
     * @returns {void}
     */
    setMediaDataSource(data: MediaData): void;
    /**
     * Sets the source data for the embed options set on the window via wistiaOptions
     * @param {EmbedOptions} data
     * @returns {void}
     */
    setWistiaWindowEmbedOptionSource(data: EmbedOptions): void;
    /**
     * Updates the embed option overrides which will be merged with the source embed option data
     * This merge can happen more frequently than our finite source data sets, which is why it's separate.
     * That way we don't have to re-merge the source data every time we update the overrides.
     * @param {EmbedOptions} data
     * @returns {void}
     */
    updateEmbedOptionOverrides(data: EmbedOptions): void;
}
//# sourceMappingURL=PlayerDataHandler.d.ts.map
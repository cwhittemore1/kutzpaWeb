import { Nilable } from '@wistia/type-guards';
import type { CarouselPlayerEmbedOptions, EndPlaylistBehavior } from '../../../types/carousel.ts';
import { EmbedOptions, PlayerTransitionType } from '../../../types/player-api-types.ts';
import { WistiaPlayer } from '../../wistiaPlayer/WistiaPlayer.tsx';
export declare const PLAYLIST_METHODS_AUTOPLAYED_NEXT_MEDIA_EVENT = "playlist-methods-autoplay-next-media-started";
export declare const PLAYLIST_METHODS_CHANGED_MEDIA_EVENT = "playlist-methods-changed-media";
export type PLAYLIST_METHODS_CHANGED_MEDIA_EVENT_PAYLOAD = Event & {
    detail: {
        mediaId: string;
    };
};
export type PlaylistMedia = {
    durationInSeconds?: number;
    embedOptions?: EmbedOptions;
    hashedId: string;
    name?: string;
};
type PlaylistMethodsDataSource = {
    id: string;
    type: 'channel' | 'player-api';
};
export type PlaylistOptions = {
    autoAdvance?: boolean;
    endBehavior?: EndPlaylistBehavior;
    isInsidePlayerControl?: boolean;
    overrideEmbedOptions?: CarouselPlayerEmbedOptions;
    source: PlaylistMethodsDataSource;
    startIndex?: number;
    transition?: PlayerTransitionType;
};
export declare class PlaylistMethods {
    activeMediaId: string;
    activeMediaIndex: number;
    isInitialized: boolean;
    readonly orderedPlaylistMedias: PlaylistMedia[];
    readonly sourceIdentifier: string | undefined;
    private _autoAdvance;
    private readonly _embedHost;
    private _endBehavior;
    private readonly _isInsidePlayerControl;
    private readonly _overrideEmbedOptions;
    private readonly _player;
    private readonly _transition;
    constructor(orderedPlaylistMedias: PlaylistMedia[], wistiaPlayer: WistiaPlayer, options: PlaylistOptions, embedHost: Nilable<string>);
    private get _lastMediaIndex();
    addMediaToPlaylist(media: PlaylistMedia, options?: {
        index?: number;
    }): void;
    getNextMedia(): PlaylistMedia | undefined;
    getPreviousMedia(): PlaylistMedia | undefined;
    playMedia(media: PlaylistMedia): Promise<void>;
    playNextMedia(isTriggeredByPlayerEndedEvent?: boolean): Promise<void>;
    playPreviousMedia(): Promise<void>;
    prefetchNextMedia(): void;
    prefetchPreviousMedia(): void;
    removePlayerEndedListener(): void;
    setAutoAdvance(value: boolean): void;
    setEndBehavior(value: EndPlaylistBehavior): void;
    private _enqueueMedia;
    private _getCachedMediaDataAsPlaylistMedia;
    private _getIndexOfMediaInPlaylist;
    private _getMediaDataAsPlaylistMedia;
    private readonly _handlePlayerEnded;
    private _prefetchMedia;
}
export {};
//# sourceMappingURL=playlist-methods.d.ts.map
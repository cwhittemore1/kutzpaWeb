import type { PublicApi, WistiaContainerHTMLElement } from '../types/player-api-types.ts';
export type MatcherFunction = (video?: MatcherFunction | PublicApi | WistiaContainerHTMLElement | 'removed' | null) => void;
/**
 * Initialized embeds are API embeds that have a wistiaApi property set on the
 * container. container.wistiaApi is set on legacy embeds in _public_api.js
 * @returns {PublicApi[]}
 */
export declare const getAllInitializedEmbedApiHandles: () => (PublicApi | "removed" | undefined)[];
/**
 * Get all initialized instances of the iframe api
 * @returns {PublicApi[]}
 */
export declare const getAllIframeApiHandles: () => (PublicApi | "removed" | undefined)[];
/**
 * Get all initialized instances of the API, inclusive of both
 * iframe API and regular embed public API
 * @returns {PublicApi[]}
 */
export declare const getAllApiHandles: () => (PublicApi | "removed" | undefined)[];
/**
 * Get a single API handle by matcher
 * @param {Function | HTMLElement | number | string | undefined} matcher - The matcher
 * @returns {PublicApi | null}
 */
export declare const getOneApiHandle: (matcher?: HTMLElement | MatcherFunction | number | string) => MatcherFunction | PublicApi | WistiaContainerHTMLElement | "removed" | null;
/**
 * Get a single API handle by ONLY hashed id, not by container id
 * @param {number | string | undefined} hashedId
 * @returns {PublicApi | null}
 */
export declare const getOneApiHandleFromHashedId: (hashedId: string) => MatcherFunction | PublicApi | WistiaContainerHTMLElement | "removed" | null;
/**
 * Get all (non-iframe) API handles in the order they appear in the DOM
 * @returns {PublicApi[]}
 */
export declare const getAllApiHandlesByDomOrder: () => (PublicApi | "removed" | undefined)[];
//# sourceMappingURL=getApiHandles.d.ts.map
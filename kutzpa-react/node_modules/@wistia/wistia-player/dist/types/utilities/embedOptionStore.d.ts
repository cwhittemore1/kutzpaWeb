import type { PublicApi } from '../types/player-api-types.ts';
export declare const OPTION_PREFIX = "wistia_embed_options_";
export declare const GLOBAL_ID_KEY = "__global__";
/**
 * Get the embed options for a given key or embed id
 * @param {string} id - The key or embed id
 * @param {Function} [matcherFn=getOneApiHandle] - Custom matcher function
 * @returns {object}
 */
export declare const getEmbedOptionStore: (id: string, matcherFn?: (matcher?: HTMLElement | import("./getApiHandles.ts").MatcherFunction | number | string) => import("./getApiHandles.ts").MatcherFunction | PublicApi | import("../types/player-api-types.ts").WistiaContainerHTMLElement | "removed" | null) => object;
/**
 * Set the embed options for a given key or embed id
 * @param {string} id - The key or embed id
 * @param {object} options - The options to set
 * @returns {object}
 */
export declare const setEmbedOptionStore: (id: string, options: object | null) => object;
/**
 * Remove the embed options for a given key or embed id
 * @param {string} id - The key or embed id
 * @param {object} options - The options to set
 * @returns {void}
 */
export declare const removeEmbedOptionStore: (id: string) => void;
/**
 * Legacy behavior replacement for Wistia.options - Get or set embed options based
 * on the parameters provided
 * @param {string | object} id - The id of the embed or an object of options
 * @param {object} options - The options to set
 * @returns {object}
 */
export declare const getOrSetEmbedOptionStore: (id?: object | string, options?: object | null) => object;
//# sourceMappingURL=embedOptionStore.d.ts.map
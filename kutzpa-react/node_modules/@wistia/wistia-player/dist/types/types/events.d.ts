import type { WistiaPlayer } from '../embeds/wistiaPlayer/WistiaPlayer.tsx';
import type { Impl, MediaData, PublicApi } from './player-api-types.ts';
import { AFTER_REPLACE_EVENT, API_READY_EVENT, BEFORE_REPLACE_EVENT, IMPL_CREATED_EVENT, INPUT_CONTEXT_CHANGE_EVENT, LOADED_MEDIA_DATA_EVENT, MUTE_CHANGE_EVENT } from '../utilities/eventConstants.ts';
interface WistiaPlayerEventTarget extends EventTarget {
    target: WistiaPlayer;
}
export type WistiaPlayerEvents = {
    [AFTER_REPLACE_EVENT]: AFTER_REPLACE_EVENT_TYPE;
    [API_READY_EVENT]: API_READY_EVENT_TYPE;
    [BEFORE_REPLACE_EVENT]: BEFORE_REPLACE_EVENT_TYPE;
    [IMPL_CREATED_EVENT]: IMPL_CREATED_EVENT_TYPE;
    [INPUT_CONTEXT_CHANGE_EVENT]: CustomEvent<{
        context: string;
    }> & WistiaPlayerEventTarget;
    [LOADED_MEDIA_DATA_EVENT]: CustomEvent<{
        mediaData: MediaData;
    }> & WistiaPlayerEventTarget;
    [MUTE_CHANGE_EVENT]: MUTE_CHANGE_EVENT_TYPE;
};
export type API_READY_EVENT_TYPE = CustomEvent<{
    mediaId: WistiaPlayer['mediaId'];
}> & WistiaPlayerEventTarget;
export type AFTER_REPLACE_EVENT_TYPE = CustomEvent<{
    api: PublicApi;
}> & WistiaPlayerEventTarget;
export type BEFORE_REPLACE_EVENT_TYPE = CustomEvent<{
    mediaId: WistiaPlayer['mediaId'];
}> & WistiaPlayerEventTarget;
export type IMPL_CREATED_EVENT_TYPE = CustomEvent<{
    impl: Impl;
}> & WistiaPlayerEventTarget;
export type MUTE_CHANGE_EVENT_TYPE = CustomEvent<{
    isMuted: boolean;
}> & WistiaPlayerEventTarget;
export {};
//# sourceMappingURL=events.d.ts.map
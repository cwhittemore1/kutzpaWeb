import { ChangeSet } from '../external/customizePreview/ChangeSet.js';
import { CarouselPosition, EndPlaylistBehavior } from './carousel.ts';
import { Gradient } from './gradient.ts';
import { CustomerLogoPlacementOption, PublicApi } from './player-api-types.ts';
type BasePluginConfig = {
    on?: boolean | 'false' | 'true' | undefined;
};
export type BasePluginInstance<TPluginConfig> = {
    init: (video: PublicApi, pluginOptions: Record<string, unknown>) => void;
    options: TPluginConfig;
};
export type Chapter = {
    ai_title?: string;
    deleted?: boolean;
    id: string;
    time: number;
    title: string;
};
export type ChaptersPluginConfig = BasePluginConfig & {
    chapterList: Chapter[];
};
type ChaptersPluginInstance = BasePluginInstance<ChaptersPluginConfig> & {
    getAllChapters: () => Chapter[];
};
export type CustomerLogoPluginConfig = BasePluginConfig & {
    imageUrl?: string;
    isEnabled: boolean;
    isForPlaylistEmbed?: boolean;
    logoPlacement?: CustomerLogoPlacementOption;
    logoSizePercent?: number;
    targetUrl?: string;
};
export type CustomerLogoPluginInstance = BasePluginInstance<CustomerLogoPluginConfig> & {
    getCurrentOptions: () => CustomerLogoPluginConfig;
    getImageUrl: () => string;
    getLogoPlacement: () => CustomerLogoPlacementOption;
    getLogoSizePercent: () => number;
    targetUrl: string | undefined;
    updateFromOptions: (options: CustomerLogoPluginConfig) => void;
};
export type HubspotFormConfig = BasePluginConfig;
export type HubspotFormPluginInstance = BasePluginInstance<HubspotFormConfig> & {
    hide: () => Promise<void>;
    suppress: () => Promise<void>;
    unsuppress: () => void;
};
export type PasswordProtectedChannelPluginConfig = BasePluginConfig & {
    password?: string;
};
export type PasswordProtectedVideoPluginConfig = BasePluginConfig & {
    password?: string;
};
export type MarketoFormConfig = BasePluginConfig;
export type MarketoFormPluginInstance = BasePluginInstance<MarketoFormConfig> & {
    hide: () => Promise<void>;
    suppress: () => Promise<void>;
    unsuppress: () => void;
};
export type PardotFormConfig = BasePluginConfig;
export type PardotFormPluginInstance = BasePluginInstance<PardotFormConfig> & {
    hide: () => Promise<void>;
    suppress: () => Promise<void>;
    unsuppress: () => void;
};
type PasswordProtectedVideoPluginInstance = BasePluginInstance<PasswordProtectedVideoPluginConfig>;
export type TurnstilePluginConfig = BasePluginConfig & {
    allowSkip: boolean;
    askName: boolean;
    async: boolean;
    bottomText?: string;
    conversionOpportunityKey?: string;
    persistentTurnstile: boolean;
    time: string;
    topText?: string;
};
type TurnstilePluginInstance = BasePluginInstance<TurnstilePluginConfig> & {
    hide: () => Promise<void>;
    suppress: () => Promise<void>;
    unsuppress: () => void;
};
type CTAPluginConfig = BasePluginConfig;
type CTAPluginInstance = BasePluginInstance<CTAPluginConfig> & {
    hide: () => Promise<void>;
    suppress: () => Promise<void>;
    unsuppress: () => void;
};
export type CarouselPluginConfig = BasePluginConfig & {
    autoAdvance?: boolean;
    backgroundColor?: string;
    carouselPosition?: CarouselPosition;
    channelId: string;
    endBehavior?: EndPlaylistBehavior;
    gradient?: Gradient;
    isCarouselButtonVisible?: boolean;
    roundedCarousel?: number;
};
export type CarouselPluginInstance = BasePluginInstance<CarouselPluginConfig>;
export type CaptionsPluginConfig = BasePluginConfig & {
    autoEnableForSilentAutoPlay?: boolean;
    isForCarousel?: boolean;
    language?: string;
    on: boolean;
    onByDefault: boolean;
    onByViewerPreferences?: boolean;
};
type CaptionLine = {
    end: number;
    start: number;
    text: string[];
};
export type CaptionsPluginInstance = BasePluginInstance<CaptionsPluginConfig> & {
    allMountedAndFetched: () => Promise<void>;
    captionsArrayChanged: (changedOptions: Partial<CaptionsPluginConfig>) => void;
    captionsOptionsChanged: (changedOptions: Partial<CaptionsPluginConfig>) => void;
    clearCache: () => void;
    customizePreview: (changeSet: typeof ChangeSet) => void;
    disable: () => void;
    enable: () => void;
    getSubtitlesScale: () => number;
    hide: () => void;
    insertCaptions: (lines: CaptionLine[]) => void;
    refreshDataFromServer: () => void;
    remove: () => void;
    restoreOriginalCaptions: () => void;
    restoreOriginalHash: (language: string) => void;
    saveOriginalHash: (language: string) => void;
    setCaptionsHash: (language: string, hash: object) => void;
    setLanguage: (lang: string) => void;
    setSubtitlesScale: (s: number) => void;
    show: () => void;
    turnOff: () => void;
    turnOffByDefaultForAllMediaInCarousel: () => void;
    turnOn: () => void;
    turnOnByDefaultForAllMediaInCarousel: () => void;
};
export type WistiaLogoPluginConfig = BasePluginConfig;
export type WistiaLogoPluginInstance = BasePluginInstance<WistiaLogoPluginConfig> & {
    remove: () => void;
};
export type PluginConfigs = {
    [x: string]: unknown;
    audioChapters?: ChaptersPluginConfig;
    captions?: CaptionsPluginConfig;
    carousel?: CarouselPluginConfig;
    chapters?: ChaptersPluginConfig;
    customerLogo?: CustomerLogoPluginConfig;
    hubspotForm?: HubspotFormConfig;
    marketoForm?: MarketoFormConfig;
    pardotForm?: PardotFormConfig;
    passwordProtectedChannel?: PasswordProtectedChannelPluginConfig;
    passwordProtectedVideo?: PasswordProtectedVideoPluginConfig;
    'postRoll-v1'?: CTAPluginConfig;
    'postRoll-v2'?: CTAPluginConfig;
    'requireEmail-v1'?: TurnstilePluginConfig;
    wistiaLogo?: WistiaLogoPluginConfig;
};
export type PluginInstances = {
    [x: string]: unknown;
    audioChapters?: ChaptersPluginInstance;
    captions?: CaptionsPluginInstance;
    carousel?: CarouselPluginInstance;
    chapters?: ChaptersPluginInstance;
    customerLogo?: CustomerLogoPluginInstance;
    hubspotForm?: HubspotFormPluginInstance;
    marketoForm?: MarketoFormPluginInstance;
    pardotForm?: PardotFormPluginInstance;
    passwordProtectedVideo?: PasswordProtectedVideoPluginInstance;
    'postRoll-v1'?: CTAPluginInstance;
    'postRoll-v2'?: CTAPluginInstance;
    turnstile?: TurnstilePluginInstance;
    wistiaLogo?: WistiaLogoPluginInstance;
};
export {};
//# sourceMappingURL=plugins.d.ts.map
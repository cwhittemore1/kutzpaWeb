import { Nilable } from '@wistia/type-guards';
import { UnauthorizedChannelData, UnauthorizedChannelServerResponseEmbedOptions } from './channel.ts';
import { CustomerLogoPlacementOption, EmbedOptions } from './player-api-types.ts';
import { CustomerLogoPluginConfig } from './plugins.ts';
import { Gradient } from './gradient.ts';
export type CarouselMediaType = {
    durationInSeconds: number;
    embedOptions: EmbedOptions;
    episodeId: number;
    hashedId: string;
    mediaType: 'Audio' | 'Video';
    name: string;
    thumbnailUrl: string;
};
type CarouselMediaResponseType = {
    duration_in_seconds: number;
    embed_options: EmbedOptions;
    episode_numeric_id: number;
    hashed_id: string;
    media_type: 'Audio' | 'Video';
    name: string;
    thumbnail_url: string;
};
export type CarouselPlayerEmbedOptions = Pick<EmbedOptions, 'aspect' | 'bigPlayButton' | 'playerColor' | 'playerColorGradient' | 'plugin'>;
export type EndPlaylistBehavior = 'default' | 'no-loop' | 'reset';
export type EndPlaylistBehaviorFromServer = 'default' | 'no_loop' | 'reset';
type CarouselPlaylistEmbedOptions = Omit<CarouselPlayerEmbedOptions, 'playerColorGradient'> & {
    autoAdvance?: boolean;
    bigPlayButton?: boolean;
    captionsOnByDefault?: boolean;
    carouselBackgroundColor?: string;
    carouselControl?: boolean;
    carouselPosition?: CarouselPosition;
    carouselVisibleOnLoad?: boolean;
    customerLogoPluginConfig?: CustomerLogoPluginConfig;
    dockCarousel?: boolean;
    endPlaylistBehavior?: EndPlaylistBehavior;
    gradient?: Gradient;
    roundedPlaylist?: string;
    wistiaLogoControl?: boolean;
};
type CarouselPlaylistEmbedOptionsFromServer = {
    auto_advance?: boolean;
    big_play_button?: boolean;
    captions_on_by_default?: boolean;
    carousel_background_color?: string;
    carousel_control?: boolean;
    carousel_position?: CarouselPosition;
    carousel_visible_on_load?: boolean;
    dock_carousel?: boolean;
    end_playlist_behavior?: EndPlaylistBehaviorFromServer;
    gradient?: Gradient;
    player_color?: string;
    player_logo_enabled: 'false' | 'true';
    player_logo_position?: CustomerLogoPlacementOption;
    player_logo_size?: number;
    player_logo_target_url?: string;
    player_logo_url?: string;
    rounded_playlist?: string;
    wistia_logo_control?: boolean;
};
export type CarouselData = {
    embedOptions: CarouselPlaylistEmbedOptions;
    episodeCount: number;
    hashedId: string;
    isWistiaLogoRequired: boolean;
    medias: CarouselMediaType[];
    name: string;
    numericId: number;
};
type CarouselDataFromServer = {
    embed_options: CarouselPlaylistEmbedOptionsFromServer;
    episode_count: number;
    error: never;
    hashed_id: string;
    is_wistia_logo_required: boolean;
    medias: CarouselMediaResponseType[];
    name: string;
    numeric_id: number;
};
type CarouselDataServerErrorResponse = {
    embed_options: never;
    episode_count: never;
    error: boolean;
    hashed_id: never;
    is_wistia_logo_required: never;
    medias: never;
    name: never;
    numeric_id: never;
};
export type CarouselDataResponse = Promise<CarouselDataFromServer | CarouselDataServerErrorResponse>;
export type CarouselColorPalette = {
    activeMediaBackgroundColor: string;
    activeMediaPrimaryTextColor: string;
    activeMediaSecondaryTextColor: string;
    backgroundColor: string;
    mediaBackgroundColor: string;
    primaryTextColor: string;
    secondaryTextColor: string;
};
export type CarouselPosition = 'bottom' | 'left' | 'right';
export type UnauthorizedCarouselData = Omit<UnauthorizedChannelData, 'embedOptions'> & {
    aspectRatio?: Nilable<number>;
    embedOptions: Omit<UnauthorizedChannelServerResponseEmbedOptions, 'backgroundColor'> & {
        backgroundColor?: Nilable<string>;
        carouselPosition: Nilable<CarouselPosition>;
        dockCarousel: Nilable<boolean>;
        roundedPlaylist: Nilable<number>;
    };
    hasOnlyAudioMedia: boolean;
};
export type CarouselHardWallData = {
    backgroundColor: string;
    logoUrl?: string;
    onSubmitPassword?: (password?: string) => Promise<null>;
    playerColor: string;
    title: string;
};
export {};
//# sourceMappingURL=carousel.d.ts.map
type BrowserClient = {
    [key: string]: unknown;
    init: () => void;
};
export type SentryScope = {
    captureException: (error: Error) => void;
    clear: () => void;
    setClient: (client: BrowserClient) => void;
    setSampleRate: (sampleRate: number) => void;
    setTag: (tagName: string, tagValue: string) => void;
    setTags: (details: Record<string, string>) => void;
};
export interface Sentry {
    BrowserClient: new ({ dsn, integrations, stackParser, transport, }: {
        dsn: string;
        integrations: unknown[];
        release: string;
        stackParser: () => unknown;
        transport: () => unknown;
    }) => BrowserClient;
    captureException: (error: Error, context?: object) => void;
    defaultStackParser: () => unknown;
    init: (config: Record<string, unknown>) => void;
    makeFetchTransport: () => unknown;
    Scope: new () => SentryScope;
    SDK_VERSION: string;
    stackParser: () => unknown;
    withScope: (fn: (scope: SentryScope) => void) => void;
}
export {};
//# sourceMappingURL=sentry.d.ts.map
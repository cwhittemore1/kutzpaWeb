import type { CSSProperties, ForwardedRef, ReactNode } from 'react';
import { WistiaPlayer } from '@wistia/wistia-player';
interface WistiaPlayerWebComponentReact extends Partial<Omit<WistiaPlayer, 'style'>> {
    class?: string;
    key?: string;
    react?: boolean;
    ref?: React.MutableRefObject<WistiaPlayer | null>;
    style?: CSSProperties;
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
            'wistia-player': WistiaPlayerWebComponentReact;
        }
    }
    interface Window {
        wistiaOptions?: Record<string, object | undefined> | undefined;
    }
}
export interface WistiaPlayerCustomEvent extends CustomEvent {
    target: WistiaPlayer;
}
export type WistiaPlayerProps = {
    aspect?: WistiaPlayer['aspect'];
    audioDescriptionControl?: WistiaPlayer['audioDescriptionControl'];
    autoplay?: WistiaPlayer['autoplay'];
    bigPlayButton?: WistiaPlayer['bigPlayButton'];
    children?: ReactNode;
    className?: string;
    controlsVisibleOnLoad?: WistiaPlayer['controlsVisibleOnLoad'];
    copyLinkAndThumbnail?: WistiaPlayer['copyLinkAndThumbnail'];
    currentTime?: WistiaPlayer['currentTime'];
    doNotTrack?: WistiaPlayer['doNotTrack'];
    email?: WistiaPlayer['email'];
    embedHost?: WistiaPlayer['embedHost'];
    endVideoBehavior?: WistiaPlayer['endVideoBehavior'];
    fullscreenControl?: WistiaPlayer['fullscreenControl'];
    height?: number;
    id?: string;
    mediaId: WistiaPlayer['mediaId'];
    muted?: WistiaPlayer['muted'];
    onApiReady?: (event: WistiaPlayerCustomEvent) => void;
    onCancelFullscreen?: (event: WistiaPlayerCustomEvent) => void;
    onCanPlay?: (event: WistiaPlayerCustomEvent) => void;
    onCanPlayThrough?: (event: WistiaPlayerCustomEvent) => void;
    onCaptionsChange?: (event: WistiaPlayerCustomEvent) => void;
    onConversion?: (event: WistiaPlayerCustomEvent) => void;
    onEnded?: (event: WistiaPlayerCustomEvent) => void;
    onEnterFullscreen?: (event: WistiaPlayerCustomEvent) => void;
    onHeightChange?: (event: WistiaPlayerCustomEvent) => void;
    onLoadedData?: (event: WistiaPlayerCustomEvent) => void;
    onLoadedMediaData?: (event: WistiaPlayerCustomEvent) => void;
    onLoadedMetadata?: (event: WistiaPlayerCustomEvent) => void;
    onLoadStart?: (event: WistiaPlayerCustomEvent) => void;
    onMuteChange?: (event: WistiaPlayerCustomEvent) => void;
    onPause?: (event: WistiaPlayerCustomEvent) => void;
    onPercentWatchedChange?: (event: WistiaPlayerCustomEvent) => void;
    onPlay?: (event: WistiaPlayerCustomEvent) => void;
    onPopoverHide?: (event: WistiaPlayerCustomEvent) => void;
    onPopoverShow?: (event: WistiaPlayerCustomEvent) => void;
    onRateChange?: (event: WistiaPlayerCustomEvent) => void;
    onSecondChange?: (event: WistiaPlayerCustomEvent) => void;
    onSeeked?: (event: WistiaPlayerCustomEvent) => void;
    onSeeking?: (event: WistiaPlayerCustomEvent) => void;
    onSilentPlaybackModeChange?: (event: WistiaPlayerCustomEvent) => void;
    onTimeUpdate?: (event: WistiaPlayerCustomEvent) => void;
    onVolumeChange?: (event: WistiaPlayerCustomEvent) => void;
    onWidthChange?: (event: WistiaPlayerCustomEvent) => void;
    playbackRateControl?: WistiaPlayer['playbackRateControl'];
    playBarControl?: WistiaPlayer['playBarControl'];
    playerColor?: WistiaPlayer['playerColor'];
    playlistLinks?: WistiaPlayer['playlistLinks'];
    playlistLoop?: WistiaPlayer['playlistLoop'];
    playPauseControl?: WistiaPlayer['playPauseControl'];
    playPauseNotifier?: WistiaPlayer['playPauseNotifier'];
    popoverAnimateThumbnail?: WistiaPlayer['popoverAnimateThumbnail'];
    popoverAnimation?: WistiaPlayer['popoverAnimation'];
    popoverBorderColor?: WistiaPlayer['popoverBorderColor'];
    popoverBorderRadius?: WistiaPlayer['popoverBorderRadius'];
    popoverBorderWidth?: WistiaPlayer['popoverBorderWidth'];
    popoverBoxShadow?: WistiaPlayer['popoverBoxShadow'];
    popoverCaption?: WistiaPlayer['popoverCaption'];
    popoverCaptionContainer?: WistiaPlayer['popoverCaptionContainer'];
    popoverContent?: WistiaPlayer['popoverContent'];
    popoverDisableAutoplay?: WistiaPlayer['popoverDisableAutoplay'];
    popoverOverlayColor?: WistiaPlayer['popoverOverlayColor'];
    popoverOverlayOpacity?: WistiaPlayer['popoverOverlayOpacity'];
    popoverPreventScroll?: WistiaPlayer['popoverPreventScroll'];
    popoverShowOnLoad?: WistiaPlayer['popoverShowOnLoad'];
    poster?: WistiaPlayer['poster'];
    preload?: WistiaPlayer['preload'];
    qualityControl?: WistiaPlayer['qualityControl'];
    qualityMax?: WistiaPlayer['qualityMax'];
    qualityMin?: WistiaPlayer['qualityMin'];
    ref?: ForwardedRef<WistiaPlayer>;
    resumable?: WistiaPlayer['resumable'];
    roundedPlayer?: WistiaPlayer['roundedPlayer'];
    seo?: WistiaPlayer['seo'];
    settingsControl?: WistiaPlayer['settingsControl'];
    silentAutoplay?: WistiaPlayer['silentAutoplay'];
    style?: React.CSSProperties;
    swatch?: WistiaPlayer['swatch'];
    transparentLetterbox?: WistiaPlayer['transparentLetterbox'];
    videoQuality?: WistiaPlayer['videoQuality'];
    volume?: WistiaPlayer['volume'];
    volumeControl?: WistiaPlayer['volumeControl'];
    width?: number;
    wistiaPopover?: WistiaPlayer['wistiaPopover'];
};
export {};
//# sourceMappingURL=index.d.ts.map
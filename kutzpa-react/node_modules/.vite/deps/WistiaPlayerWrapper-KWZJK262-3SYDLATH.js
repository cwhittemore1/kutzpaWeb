"use client";
import {
  camelCaseToKebabCase,
  getMergedEmbedOption,
  getSwatchAspectRatio,
  wistiaPlayerStyleBlock
} from "./chunk-GFM7KBTH.js";
import {
  require_jsx_runtime
} from "./chunk-KHN7SQKI.js";
import {
  require_react
} from "./chunk-LL6ON2IQ.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@wistia/wistia-player-react/dist/mjs/WistiaPlayerWrapper-KWZJK262.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var WistiaPlayerWrapper = (0, import_react.forwardRef)(
  (props, ref) => {
    const { aspect, className, embedHost, id, mediaId, roundedPlayer, swatch, style } = props;
    const finalEmbedHost = getMergedEmbedOption(mediaId, "embedHost", embedHost ?? void 0);
    const player = (0, import_react.useRef)(null);
    const [swatchAspectRatio, setSwatchAspectRatio] = (0, import_react.useState)(aspect);
    const [isWistiaPlayerDefined, setIsWistiaPlayerDefined] = (0, import_react.useState)(false);
    (0, import_react.useEffect)(() => {
      if (swatch !== false && swatchAspectRatio === void 0) {
        void getSwatchAspectRatio(mediaId, finalEmbedHost).then((ratio) => {
          setSwatchAspectRatio(ratio);
        });
      }
      void import("./wistia-player-PSOGZFTV-AYLA7KJJ.js");
      void customElements.whenDefined("wistia-player").then(() => {
        setIsWistiaPlayerDefined(true);
      });
    }, []);
    const eventProps = {};
    const embedOptionProps = {};
    Object.entries(props).forEach(([key, value]) => {
      if (key.startsWith("on") && key[2] === key[2].toUpperCase()) {
        const formattedKey = camelCaseToKebabCase(key).slice(3);
        eventProps[formattedKey] = value;
      } else {
        embedOptionProps[camelCaseToKebabCase(key)] = value;
      }
    });
    Object.entries(eventProps).forEach(([event, callback]) => {
      (0, import_react.useEffect)(() => {
        const playerRef = player.current;
        playerRef == null ? void 0 : playerRef.addEventListener(event, callback);
        return () => {
          playerRef == null ? void 0 : playerRef.removeEventListener(event, callback);
        };
      }, [callback, isWistiaPlayerDefined]);
    });
    const shouldDisplaySwatch = swatchAspectRatio !== void 0;
    const styleBlock = wistiaPlayerStyleBlock({
      mediaId,
      embedHost: finalEmbedHost,
      aspect: swatchAspectRatio,
      shouldLoadSwatch: swatch,
      roundedPlayer
    });
    return (0, import_jsx_runtime.jsxs)(import_react.Fragment, { children: [
      shouldDisplaySwatch && (0, import_jsx_runtime.jsx)("style", { dangerouslySetInnerHTML: { __html: styleBlock } }),
      (0, import_jsx_runtime.jsx)(
        "wistia-player",
        {
          ref: (node) => {
            player.current = node;
            if (typeof ref === "function") {
              ref(node);
            } else if (ref !== null) {
              ref.current = node;
            }
          },
          id: id ?? void 0,
          "media-id": mediaId,
          class: className,
          style,
          react: true,
          ...embedOptionProps
        },
        id ?? mediaId
      )
    ] });
  }
);
export {
  WistiaPlayerWrapper
};
//# sourceMappingURL=WistiaPlayerWrapper-KWZJK262-3SYDLATH.js.map
